name: APK-Pipeline
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        required: true
        type: string
permissions:
  contents: write

jobs:
  setup_and_build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Google Services JSON File
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $GOOGLE_SERVICES_JSON | base64 -di > ${{ github.workspace }}/android/app/google-services.json

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'gradle'

      - name: Setup Node.Js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn

      - name: Copy CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/runner-files/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Cache Gradle Wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew

      - name: Generate App APK
        if: github.event.inputs.version != ''
        run: |
          cd android && ./gradlew assembleRelease --no-daemon

      - name: Sign APK
        id: sign_app
        if: github.event.inputs.version != ''
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "31.0.0"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        if: github.event.inputs.version != ''
        with:
          name: signed-apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

  Github_Release:
    runs-on: ubuntu-latest
    needs: setup_and_build
    steps:
      - name: Get tag name
        if: github.event.inputs.version != ''
        run: |
          set -x
          echo "VERSION_TAG=${{github.event.inputs.version}}" >> $GITHUB_ENV

      - name: Download artifact
        if: env.VERSION_TAG != ''
        uses: actions/download-artifact@v3
        with:
          name: signed-apk

      - name: Rename apk
        if: env.VERSION_TAG != ''
        run: mv app-release-signed.apk App-${{ env.VERSION_TAG }}.apk

      - name: Create Release to Github
        if: env.VERSION_TAG != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION_TAG }}
          name: Release ${{ env.VERSION_TAG }}
          files: App-${{ env.VERSION_TAG }}.apk
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Firebase_distribution:
    runs-on: ubuntu-latest
    needs: setup_and_build
    steps:
      - name: Get tag name
        if: github.event.inputs.version != ''
        run: |
          set -x
          echo "VERSION_TAG=${{github.event.inputs.version}}" >> $GITHUB_ENV

      - name: Download artifact
        if: env.VERSION_TAG != ''
        uses: actions/download-artifact@v3
        with:
          name: signed-apk

      - name: Rename apk
        if: env.VERSION_TAG != ''
        run: mv app-release-signed.apk App-${{ env.VERSION_TAG }}.apk

      - name: Upload to Firebase Distribution
        if: env.VERSION_TAG != ''
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.ANDROID_FIREBASE_APP_ID}}
          token: ${{secrets.ANDROID_FIREBASE_TOKEN}}
          groups: testers
          file: App-${{ env.VERSION_TAG }}.apk
